using LuukAPICase.Controllers.Enums;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using System;
using LuukAPICase.Data;
using LuukAPICase.Models;
using LuukAPICase.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json.Linq;
using LuukAPICase.DTO;

namespace LuukAPICase.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AddressController : ControllerBase
    {
        private readonly DatabaseContext _context;

        private readonly IAddressService _addressService;

        public AddressController(DatabaseContext context, IAddressService addressService)
        {
            _context = context;
            _addressService = addressService;
        }  
    /// <summary>
    /// Gets all the addresses in the database.
    /// </summary>
    /// <returns>A list of Address objects.</returns>
    /// <response code="200">The addresses were found.</response>
        [HttpGet("GetAllAddress")]
        [ProducesResponseType(200)]
        public async Task<ActionResult<IEnumerable<Address>>> GetAddresses()
        {
            return Ok(await _addressService.GetAll());
        }
    /// <summary>
    /// 
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
        [HttpGet("GetAddress : Insert Id To Get The Address")]
        [ProducesResponseType(200)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<Address>> GetAddress(Guid id)
        {
          
            return Ok(await _addressService.GetAddressById(id));
        }
    /// <summary>
    /// 
    /// </summary>
    /// <param name="addressrequest"></param>
    /// <returns></returns>
        [HttpPost("AddAddress : Insert Body (Id is AutoGenerated)")]
        [ProducesResponseType(201)]

        public async Task<ActionResult<Address>> PostAddress(AddressRequest addressrequest)
        {

            var result = await _addressService.PostAddress(addressrequest);
            return CreatedAtAction("GetAddress", new { id = result.Id }, result);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="address"></param>
        /// <returns></returns>
        [HttpPut("EditAddressById{id}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(404)]
        public async Task<IActionResult> PutAddress(UpdateRequest updateRequest)
        {

            var result = await _addressService.PutAddress(updateRequest);
            return NoContent();
        }
    /// <summary>
    /// 
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
        [HttpDelete("DeleteAddressById")]
        [ProducesResponseType(204)]
        [ProducesResponseType(404)]
        public async Task<IActionResult> DeleteAddress(Guid id)
        {
            var address = await _context.Addresses.FindAsync(id);
            if (address == null)
            {
                return NotFound();
            }

            _context.Addresses.Remove(address);
            await _context.SaveChangesAsync();

            return NoContent();
        }
        // GET: api/Addresses/Search?column=Id&comparator=1&order=Id
        /// <summary>
        /// Search through the database.
        /// </summary>
        /// <param name="column">What column to search through.</param>
        /// <param name="comparator">What to compare the searched column to.</param>
        /// <param name="order">What to order the results by.</param>
        /// <param name="suffix">Choose ASC or DESC</param>
        /// <returns>A list of addresses matching the entered search query.</returns>
        /// <response code="200">The query was executed succesfully and results were found.</response>
        /// <response code="400">The query could not be executed due to one or more parameters being null.</response>
        /// <response code="404">The query was executed succesfully but no results were found.</response>
        [HttpGet("Search : Example (Country , Tunisia , ZipCode , ASC)")]
        [ProducesResponseType(200)]
        [ProducesResponseType(400)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<IEnumerable<Address>>> Search([FromQuery] string column, [FromQuery] string comparator, [FromQuery] string order, [FromQuery] string suffix)
        {
            if (column == null || order == null) return BadRequest();
            _ = Enum.TryParse(column.ToLower(), out Columns enumColumn);
            _ = Enum.TryParse(order.ToLower(), out Columns orderColumn);
            _ = Enum.TryParse(suffix.ToLower(), out Suffix triSuffix);
            var  foundAddresses = await _addressService.Search(enumColumn, comparator, orderColumn, triSuffix);
            return foundAddresses.Any() ? Ok(foundAddresses) : NotFound();
        }
    /// <summary>
    /// 
    /// </summary>
    /// <param name="addressId1"></param>
    /// <param name="addressId2"></param>
    /// <returns></returns>
        [HttpGet("Distance : Insert Id1 , Id2")]
        [ProducesResponseType(200)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<String>> CalculateDistance(Guid addressId1, Guid addressId2)
        {
           var result = await _addressService.CalculateDistance(addressId1, addressId2);
            if (result == null )
                return NotFound();

            return Ok(result);
        }
    /// <summary>
    /// 
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
        private bool AddressExists(Guid id)
        {
            return _context.Addresses.Any(e => e.Id == id);
        }
    }
}
